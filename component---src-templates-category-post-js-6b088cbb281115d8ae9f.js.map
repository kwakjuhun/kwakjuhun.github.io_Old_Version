{"version":3,"sources":["webpack://flexible-gatsby/./src/components/seo.js","webpack://flexible-gatsby/./src/templates/category-post.js"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","pageContext","data","siteTitle","category","posts","allMarkdownRemark","edges","keywords","className","map","node","key","fields","slug","frontmatter","img","childImageSharp","gatsbyImageData","Link","to","style","backgroundImage","images","fallback","src","excerpt","date","timeToRead"],"mappings":"yJAYA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,GAASC,oBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACE,gBAAC,IAAD,CACEQ,eAAgB,CACdP,QAEFE,MAAOA,EACPM,cAAa,QAAUL,EAAKG,aAAaJ,MACzCD,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASL,IAEXQ,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,qFCpCA,UA7CmB,SAAC,GAA2B,IAAzBgB,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAEzBC,GADeF,EAAbG,SACUF,EAAKb,KAAKG,aAAaJ,OACnCiB,EAAQH,EAAKI,kBAAkBC,MACrC,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CACAnB,MAAOe,EACPK,SAAU,CAAC,OAAD,iCAEV,uBAAKC,UAAU,wBACVJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACV,OACI,2BAASF,UAAU,OAAOG,IAAKD,EAAKE,OAAOC,MACtCH,EAAKI,YAAYC,KAClBL,EAAKI,YAAYC,IAAIC,iBACrBN,EAAKI,YAAYC,IAAIC,gBAAgBC,iBACjC,gBAAC,EAAAC,KAAD,CACAC,GAAI,IAAIT,EAAKI,YAAYX,SAASO,EAAKE,OAAOC,KAC9CL,UAAU,iBACVY,MAAO,CACHC,gBAAgB,OAAQX,EAAKI,YAAYC,IAAIC,gBAAgBC,gBAAgBK,OAAOC,SAASC,IAA9E,OAIvB,uBAAKhB,UAAU,gBACX,sBAAIA,UAAU,cACV,gBAAC,EAAAU,KAAD,CAAMC,GAAI,IAAIT,EAAKI,YAAYX,SAASO,EAAKE,OAAOC,MAAOH,EAAKI,YAAY3B,QAEhF,yBAAIuB,EAAKe,SACT,wBAAMjB,UAAU,aACXE,EAAKI,YAAYY,KADtB,QAGA,wBAAMlB,UAAU,cACXE,EAAKiB,WADV","file":"component---src-templates-category-post-js-6b088cbb281115d8ae9f.js","sourcesContent":["/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\n\r\nimport Layout from '../components/layout'\r\nimport SEO from '../components/seo'\r\n\r\nconst Categories = ({ pageContext, data }) => {\r\n    const { category } = pageContext\r\n    const siteTitle = data.site.siteMetadata.title\r\n    const posts = data.allMarkdownRemark.edges\r\n    return (\r\n        <Layout>\r\n            <SEO\r\n            title={siteTitle}\r\n            keywords={[`blog`, `gatsby`, `javascript`, `react`]}\r\n            />\r\n            <div className=\"content-box clearfix\">\r\n                {posts.map(({ node }) => {\r\n                    return (\r\n                        <article className=\"post\" key={node.fields.slug}>\r\n                            {node.frontmatter.img &&\r\n                            node.frontmatter.img.childImageSharp &&\r\n                            node.frontmatter.img.childImageSharp.gatsbyImageData && (\r\n                                <Link\r\n                                to={\"/\"+node.frontmatter.category+node.fields.slug}\r\n                                className=\"post-thumbnail\"\r\n                                style={{\r\n                                    backgroundImage: `url(${node.frontmatter.img.childImageSharp.gatsbyImageData.images.fallback.src})`,\r\n                                }}\r\n                                />\r\n                            )}\r\n                            <div className=\"post-content\">\r\n                                <h2 className=\"post-title\">\r\n                                    <Link to={\"/\"+node.frontmatter.category+node.fields.slug}>{node.frontmatter.title}</Link>\r\n                                </h2>\r\n                                <p>{node.excerpt}</p>\r\n                                <span className=\"post-date\">\r\n                                    {node.frontmatter.date}&nbsp;&nbsp;â€”&nbsp;\r\n                                </span>\r\n                                <span className=\"post-words\">\r\n                                    {node.timeToRead} minute read\r\n                                </span>\r\n                            </div>\r\n                        </article>\r\n                    )\r\n                })}\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Categories\r\n\r\nexport const pageQuery = graphql`\r\n    query CategoryPostBySlug($category: String) {\r\n        site {\r\n            siteMetadata {\r\n                title\r\n            }\r\n        }\r\n        allMarkdownRemark(\r\n            limit: 2000\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n            filter: { frontmatter: { category: { in: [$category] } } }\r\n        ) {\r\n            totalCount\r\n            edges {\r\n                node {\r\n                    excerpt\r\n                    fields {\r\n                        slug\r\n                    }\r\n                    timeToRead\r\n                    frontmatter {\r\n                        date(formatString: \"MMMM DD, YYYY\")\r\n                        title\r\n                        category\r\n                        img {\r\n                            childImageSharp {\r\n                                gatsbyImageData(placeholder: BLURRED,\r\n                                    layout: FULL_WIDTH,\r\n                                    formats: [AUTO, AVIF, WEBP])\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`"],"sourceRoot":""}