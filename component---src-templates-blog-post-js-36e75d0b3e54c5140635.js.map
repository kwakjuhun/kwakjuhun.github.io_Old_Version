{"version":3,"sources":["webpack://flexible-gatsby/./src/components/seo.js","webpack://flexible-gatsby/./src/templates/blog-post.js"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","BlogPostTemplate","render","post","this","props","data","markdownRemark","frontmatter","excerpt","className","img","G","image","childImageSharp","gatsbyImageData","key","src","alt","date","dangerouslySetInnerHTML","__html","html","tags","map","tag","Link","to","React"],"mappings":"yJAYA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,GAASC,oBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACE,gBAAC,IAAD,CACEQ,eAAgB,CACdP,QAEFE,MAAOA,EACPM,cAAa,QAAUL,EAAKG,aAAaJ,MACzCD,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASL,IAEXQ,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,4HC7EMgB,E,6FACJC,OAAA,WACE,IAAMC,EAAOC,KAAKC,MAAMC,KAAKC,eAC7B,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKnB,MAAOe,EAAKK,YAAYpB,MAAOH,YAAakB,EAAKM,UACtD,uBAAKC,UAAU,6BACb,2BAASA,UAAU,gBACjB,uBAAKA,UAAU,gBACZP,EAAKK,YAAYG,KAChB,uBAAKD,UAAU,oBACb,8BACE,gBAAC,EAAAE,EAAD,CACEC,MACEV,EAAKK,YAAYG,IAAIG,gBAAgBC,gBAEvCL,UAAU,aACVM,IACEb,EAAKK,YAAYG,IAAIG,gBAAgBC,gBAAgBE,IAEvDC,IAAI,OAKZ,uBAAKR,UAAU,gBACb,0BAAQA,UAAU,eAChB,sBAAIA,UAAU,cAAcP,EAAKK,YAAYpB,OAC7C,uBAAKsB,UAAU,aACb,4BAAOP,EAAKK,YAAYW,QAG5B,uBAAKC,wBAAyB,CAAEC,OAAQlB,EAAKmB,QAC7C,uBAAKZ,UAAU,eACb,uBAAKA,UAAU,YACZP,EAAKK,YAAYe,MAChBpB,EAAKK,YAAYe,KAAKC,KAAI,SAACC,GAAD,OACxB,wBAAMT,IAAKS,GACT,gBAAC,EAAAC,KAAD,CAAMhB,UAAU,MAAMiB,GAAE,SAAW,IAAUF,GAArB,KAAxB,KACKA,e,GAvCAG,aAsD/B","file":"component---src-templates-blog-post-js-36e75d0b3e54c5140635.js","sourcesContent":["/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\nimport { kebabCase } from 'lodash'\r\nimport { GatsbyImage } from 'gatsby-plugin-image'\r\n\r\nimport DefaultLayout from '../components/layout'\r\nimport SEO from '../components/seo'\r\n\r\nimport 'katex/dist/katex.min.css'\r\n\r\nclass BlogPostTemplate extends React.Component {\r\n  render() {\r\n    const post = this.props.data.markdownRemark\r\n    return (\r\n      <DefaultLayout>\r\n        <SEO title={post.frontmatter.title} description={post.excerpt} />\r\n        <div className=\"clearfix post-content-box\">\r\n          <article className=\"article-page\">\r\n            <div className=\"page-content\">\r\n              {post.frontmatter.img && (\r\n                <div className=\"page-cover-image\">\r\n                  <figure>\r\n                    <GatsbyImage\r\n                      image={\r\n                        post.frontmatter.img.childImageSharp.gatsbyImageData\r\n                      }\r\n                      className=\"page-image\"\r\n                      key={\r\n                        post.frontmatter.img.childImageSharp.gatsbyImageData.src\r\n                      }\r\n                      alt=\"\"\r\n                    />\r\n                  </figure>\r\n                </div>\r\n              )}\r\n              <div className=\"wrap-content\">\r\n                <header className=\"header-page\">\r\n                  <h1 className=\"page-title\">{post.frontmatter.title}</h1>\r\n                  <div className=\"page-date\">\r\n                    <span>{post.frontmatter.date}</span>\r\n                  </div>\r\n                </header>\r\n                <div dangerouslySetInnerHTML={{ __html: post.html }} />\r\n                <div className=\"page-footer\">\r\n                  <div className=\"page-tag\">\r\n                    {post.frontmatter.tags &&\r\n                      post.frontmatter.tags.map((tag) => (\r\n                        <span key={tag}>\r\n                          <Link className=\"tag\" to={`/tags/${kebabCase(tag)}/`}>\r\n                            # {tag}\r\n                          </Link>\r\n                        </span>\r\n                      ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </article>\r\n        </div>\r\n      </DefaultLayout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n      }\r\n    }\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"YYYY, MMM DD\")\r\n        tags\r\n        category\r\n        img {\r\n          childImageSharp {\r\n            gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH, formats: [AUTO, AVIF, WEBP])\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}